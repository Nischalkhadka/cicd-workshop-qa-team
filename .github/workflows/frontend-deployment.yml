name: Frontend Deployment

on:
  push:
    branches: [ team3-nischal, main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deployment.yml'
  workflow_dispatch:  # Allow manual triggers

jobs:
  deploy:
    name: Deploy Frontend to S3 + CloudFront
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Set timeout
    
    env:
      REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
      NODE_ENV: production
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --watchAll=false
        
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
          CI: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: |
          echo "Deploying to S3 bucket ${{ secrets.S3_BUCKET }}..."
          aws s3 sync frontend/build/ s3://${{ secrets.S3_BUCKET }} --delete
        
      - name: Invalidate CloudFront cache
        run: |
          echo "Invalidating CloudFront distribution ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}..."
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          # Wait for CloudFront invalidation to complete
          sleep 30
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.CLOUDFRONT_URL }})
          if [ $HTTP_STATUS -ne 200 ]; then
            echo "Deployment verification failed! Site returned HTTP $HTTP_STATUS"
            exit 1
          fi
          echo "Deployment verified successfully!"

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}